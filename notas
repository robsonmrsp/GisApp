Dia 09/07/2011
1) Deu-se início ao projeto co a execução do seguinte comando:
	webAppCreator -overwrite -templates maven,sample,readme -out GisApp  com.gis.GisApp
	Ajustes do codigo Gerado
	-- Provavelmente voce precisará criar as variáveis de ambiente, uma delas é o M2_REPO
	-- com relação a versão, precisamos alterar a versão do java para as classes geradas(os .class são compativeis com 1.5) assim como o fonte. Mas isso pode ser um problema da minha workspace.
	Uma vez criado o projeto, o mesmo foi disparado para testes(no modo dev) com um simples click com o botão direito sobre o descritor do modulo gwt e execução do mesmo como GWT application.

2) Uma vez funcionando em modo desenvolvimento, foi executada a compilação e empacotamento do projeto com o mavem.
	mvn gwt:clean
	mvn gwt:run       # run development mode
	mvn gwt:compile   # compile to javascript
	mvn package       # generate a .war package ready to deploy

Apos tudo isso a apicação funcionou perfeitamente.

prontos para o primeiro commit.

Criação do projeto usando o comando	
	webAppCreator -overwrite -templates maven,sample,readme -out GisApp  com.gis.GisApp
	
	execução dos comandos abaixo	
	mvn gwt:clean
	mvn gwt:run    
    mvn gwt:compile
    mvn package   
##################   Primeiro commit:  #################
Global setup:
 Set up git
  git config --global user.name "Marcio Robson"
  git config --global user.email robsonmrsp@gmail.com
Next steps:
  mkdir GisApp
  cd GisApp
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:robsonmrsp/GisApp.git
  git push -u origin master

 #####################################################################################################################
 Próximos passos!
 -- Adicionar injeção de dependencia com spring 3
 -- Adicionar acesso a dados com Hibernate.
 -- uma vez ambos funcionado, adicionar o mapa e em seguida postgis.
 #####################################################################################################################
 Dia 12/07/2011  Hoje iremos adicionar o Spring ao nosso projeto:
 Passos:
 1-  No pom.xml adicionar as linhas que definem o spring 3.0 como dependencia de nosso projeto
 			<springVersion>3.0.5.RELEASE</springVersion>
 		
 		core do spring	
 		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${springVersion}</version>
		</dependency>

as seguinte são necessárias pelo fato de termos uma aplicação WEB	
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${springVersion}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${springVersion}</version>
		</dependency>
 
#####################################################################################################
Adicionar o framework de OR , neste caso usaremos o hibernate.

Adicionando as dependencias ao pom

Spring orm para que o spring se encarregue da sessionFactory
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${springVersion}</version>
		</dependency>

 dbcp para que tenhamos um dataSource tambem gerido pelo spring, concentrando assim as configurações, não precisando faze-las no container web. Tomcat por exemplo,
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
		</dependency>
 O hibernate core, este por sua vez carrega uma série de outras bibliotecas como dependencias. Mais a frete falaremos delas e de um GRANDE problema para o desenvolvimento. 
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernateVersion}</version>
		</dependency>
O hibernate Spatial, já que nossa aplicação irá tratar dados espaciais.
		<dependency>
			<groupId>org.hibernatespatial</groupId>
			<artifactId>hibernate-spatial-postgis</artifactId>
			<version>1.1</version>
		</dependency>
O driver do postgres 
 		<dependency>
			<groupId>postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<!-- <scope>provided</scope> -->
			<version>8.4-701.jdbc3</version>
		</dependency>

Nota: Por mais que o maven arrume o classpath da aplicação, 
por algum motivo MAGICO algumas classes não são carregadas pelo jetty em modo debugue, por exemplo, os drivers do postgres, 
as classes do slfj, do validator do hibernate, etc. Para resolver este problema criaremos uma pasta lib e adicionaremos os pacotes que as classes dadas como faltantes. 
alguns pacotes são(observe o "lib" prefixando alguns pacotes. Isso ocorre pois o eclipse acusa um erro extranho e só assim pra resolver):

		slf4j-api-1.6.1.jar   
		hibernate-validator-4.0.0.GA.jar
		lib-hibernate-spatial-postgis-1.1.jar 
		lib-slf4j-api-1.6.1.jar
		postgis-1.5.0.jar
		slf4j-nop-1.6.1.jar
		
		O mesmo vale para qualquer outra biblioteca que seja carregada pelo spring ou hibernate(pelo menos foi o que pudemos notar)
		
 
		
		

 